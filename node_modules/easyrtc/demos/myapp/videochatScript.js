/* Global data */
var type; /* type of user; 0=blind, 1=assistant */
var uid; /* easyRTC id of user */
var puid; /* easyRTC id of pairing user */
var step; /* for enable section; 1=start, 2=wait, 3=alertCall, 4=videoChat, 5=video&pano, 6=lost connection */
var isHangup;
var onlineAssistant = [];
var valid;
var isCalling;

/* Core function */
function updateSection(){
	document.getElementById('startSection').style.visibility = 'hidden';
	document.getElementById('mainSection').style.visibility = 'hidden';
	document.getElementById('menuBar').style.visibility = 'hidden';
	document.getElementById('acceptCallBox').style.visibility = 'hidden';
	document.getElementById('alertCall').style.visibility = 'hidden';
	document.getElementById('videoCallSection').style.visibility = 'hidden';
	document.getElementById('callerVideo').style.visibility = 'hidden';
	document.getElementById('startPanoButton').style.visibility = 'hidden'
	
	if(step == 1) document.getElementById('startSection').style.visibility = 'visible';
	else if(step == 2){
		document.getElementById('mainSection').style.visibility = 'visible';
		document.getElementById('menuBar').style.visibility = 'visible';
		document.getElementById('bottomButton').innerHTML = "Logout";
		if (type == 0) document.getElementById('mainText').innerHTML = "Connecting to assistant";
		else if(type == 1) document.getElementById('mainText').innerHTML = "Waiting for request from the blinds";
	} else if(step == 3){
		document.getElementById('acceptCallLabel').innerHTML = "New request is arrived!";
		document.getElementById('acceptCallBox').style.visibility = 'visible';
	} else if(step == 4){
		document.getElementById('menuBar').style.visibility = 'visible';
		document.getElementById('videoCallSection').style.visibility = 'visible';
		if(type == 1) {
			document.getElementById('callerVideo').style.visibility = 'visible';
			document.getElementById('startPanoButton').style.visibility = 'visible';
			document.getElementById('startPanoButton').innerHTML = 'Start wide view';
		}
		document.getElementById('bottomButton').innerHTML = "End call";
	} else if(step ==5){
		document.getElementById('menuBar').style.visibility = 'visible';
		document.getElementById('videoCallSection').style.visibility = 'visible';
		if(type == 1) {
			document.getElementById('callerVideo').style.visibility = 'visible';
			document.getElementById('startPanoButton').style.visibility = 'visible';
			document.getElementById('startPanoButton').innerHTML = 'Stop wide view';
		}
		document.getElementById('bottomButton').innerHTML = "End call";
	} else if(step == 6){
		document.getElementById('alertCall').style.visibility = 'visible';
		if(type == 0) document.getElementById('callAgain').innerHTML = "Call again";
		else if(type == 1) document.getElementById('callAgain').innerHTML = "Wait for next request";
	}
}

/* Function in startSection */
function blindConnection(){
	type = 0;
    connectToEasyRTC();
    valid = false;
    isCalling = false;
}

function assistantConnection(){
	type = 1;
    connectToEasyRTC();
    valid = false;
}

function connectToEasyRTC(){
	easyrtc.enableAudio(true);
    if(type == 0) easyrtc.enableVideo(true);
    else easyrtc.enableVideo(false);
    easyrtc.setRoomOccupantListener(convertListToButtons);
    easyrtc.connect("easyrtc.audioVideo", loginSuccess, loginFailure);
    step = 2;
	updateSection();
}

/* Function in mainSection */
function alertCall () {
	step = 3;
	updateSection();
}

function acceptCall(){
	step = 4;
	updateSection();
	isHangup = false;
}

function rejectCall(){
	step = 2;
	updateSection();
}

function logout(){
	if(step == 2) {
		step = 1;
		easyrtc.disconnect();
		updateSection();
	}
	else {
		step = 2;
		isHangup = true;
		easyrtc.hangupAll();
		updateSection();
	}
}

/* Function in videoCallSection */
function startPano(){
    alert("Sorry... this function not avaliable");
	/* Capture stream video */
    /*
    if(step == 4) {
		step = 5;
		testCapture();
	}
	else if(step == 5) {
		step = 4;
		stopCapture();
	}
	updateSection(); 
    */
}

function lostConnection(){
	step = 6;
	updateSection();
}

function newCall(){
	if(type == 0) {
		easyrtc.hangupAll();
		step = 2;
        updateSection();
	}
	else {
		step = 2;
		updateSection();
	}
}

function cancelCall(){
	window.location.reload();
}

function callAgain(){
	if(onlineAssistant.size > 0) performCall(onlineAssistant.pop());
	else {
	    document.getElementById('mainText').innerHTML = "Connecting to other assistant";	
	}
}

function exit(){
	step = 1;
	easyrtc.disconnect();
	updateSection();
}

/* EasyRTC connection */
var haveSelfVideo = false;

function loginSuccess(easyrtcid) {
    uid = easyrtcid;
}


function loginFailure(errorCode, message) {
    easyrtc.showError(errorCode, message);
}

function convertListToButtons (roomName, occupants, isPrimary) {
	valid = false;
    if(type == 0){
    	for(var easyrtcid in occupants) {
    		valid = true;
    		onlineAssistant.push(easyrtcid);
    	}
    }
    if(valid&&(!isCalling)) {
        isCalling = true;
        performCall(onlineAssistant.pop());
    }
}

function performCall(otherEasyrtcid) {
    easyrtc.hangupAll();

    var acceptedCB = function(accepted, easyrtcid) {
        if( !accepted ) {
            puid = otherEasyrtcid;
            callAgain();
        } else {
        	acceptCall();
        }
    };

    var successCB = function() {
        setUpMirror();
    };
    var failureCB = function() {
    };
    easyrtc.call(otherEasyrtcid, successCB, failureCB, acceptedCB);
}

function setUpMirror() {
    if( !haveSelfVideo) {
        var selfVideo = document.getElementById("selfVideo");
        easyrtc.setVideoObjectSrc(selfVideo, easyrtc.getLocalStream());
        selfVideo.muted = true;
        haveSelfVideo = true;
    }
}

function debug(toShowText){
	alert(toShowText);
}

function disable(domId) {
    document.getElementById(domId).disabled = "disabled";
}

function enable(domId) {
    document.getElementById(domId).disabled = "";
}

easyrtc.setStreamAcceptor( function(easyrtcid, stream) {
    setUpMirror();
    var video = document.getElementById('callerVideo');
    easyrtc.setVideoObjectSrc(video,stream);
});

easyrtc.setOnStreamClosed( function (easyrtcid) {
    easyrtc.setVideoObjectSrc(document.getElementById('callerVideo'), "");
    isCalling = false;
    lostConnection();
});

var callerPending = null;

easyrtc.setCallCancelled( function(easyrtcid){
    if( easyrtcid === callerPending) {
        //document.getElementById('acceptCallBox').style.display = "none";
        callerPending = false;
    }
});


easyrtc.setAcceptChecker(function(easyrtcid, callback) {
    document.getElementById('acceptCallBox').style.display = "block";
    callerPending = easyrtcid;
    if( easyrtc.getConnectionCount() > 0 ) {
        document.getElementById('acceptCallLabel').innerHTML = "Drop current call and accept new from " + easyrtc.idToName(easyrtcid) + " ?";
    }
    else {
        if (type == 1) alertCall();
    }
    var acceptTheCall = function(wasAccepted) {
        document.getElementById('acceptCallBox').style.display = "none";
        if( wasAccepted && easyrtc.getConnectionCount() > 0 ) {
            easyrtc.hangupAll();
        }
        callback(wasAccepted);
        callerPending = null;
    };
    document.getElementById("callAcceptButton").onclick = function() {
        acceptTheCall(true);
    	acceptCall();
    };
    document.getElementById("callRejectButton").onclick =function() {
        acceptTheCall(false);
        rejectCall();
    };
} );

/* Capture and download stream video */
var isProcessing;
var firstTime = true;

function testCapture(){
    if(firstTime){
        firstTime = false;
        isProcessing = true;
    }
    var video = document.getElementById('callerVideo');
    var thecanvas = document.getElementById('thecanvas');
    var img = document.getElementById('theImage');

    // get the canvas context for drawing
    var context = thecanvas.getContext('2d');
 
    // draw the video contents into the canvas x, y, width, height
    context.drawImage( video, 0, 0, thecanvas.width, thecanvas.height);
 
    // get the image data from the canvas object
    var dataURL = thecanvas.toDataURL();
    console.log(dataURL);
 
    // set the source of the img tag
    img.setAttribute('src', dataURL);

    
    var image = thecanvas.toDataURL("image/png").replace("image/png", "image/octet-stream"); //Convert image to 'octet-stream' (Just a download, really)
    //window.location.href = image;
    var a = document.createElement('a'),file;
    a.href = image;
    a.download = 'picture.png';
    a.click();
    if (isProcessing) setTimeout(testCapture, 2000); // Loop until stop
}

function stopCapture(){
    isProcessing = false;
    setTimeout(function(){
        firstTime = true;
    }, 2000);
}